Informações Tecnicas:
Node=10.15.0
Angular=7.2.16
SpringBoot=2.1.2
Java=8
Layout=AdminLTE (colorlib)

---------------
-----SLIDE 1 [CAPA]
---------------

Boa noites a todos, meu nome é Gabriel e o meu projeto é LISTA DE COMPRAS INTELIGENTE

---------------
-----SLIDE 2
---------------

O que é a Lista de Compras Inteligente?

Pois bem, de forma resumida, trata-se de um serviço que possibilita ao usuário cadastrar suas receitas, e com essas receitas montar um cardápio semanal e ao final gerar uma lista de compras com todos os ingredientes que serão necessários para o preparo das refeições contidas no cardápio para a semana inteira.

Nesse sistema o usuario deverá criar uma conta para acesso-lo;

Com a conta criada ele pode registrar os ingredientes que precisará utilizar nas futuras receitas;

Cadastrar as suas receitas (informando quais dos ingredientes já cadastrados irá utilizar e sua devida quantidade e também o modo de preparo da receita)

Poderá montar um cardápio semanal(de segunda a sexta) com essas receitas  previamente cadastradas;

E claro, gerar um lista de compras do cardápio semanal desejado;

---------------
-----SLIDE 3
---------------
Motivação

Diversas pessoas já se encontram na situação de ir ao mercado comprar os ingredientes para o preparo de alguma refeição seja ela almoço, jantar, até mesmo um lanche ou sobremesa e quando chega em casa lembra que faltou comprar algo ou até mesmo não comprou porque não sabia que precisava do ingrediente para a receita e sabemos que com as diversas responsabilidade diárias, temos cada vez menos tempo de ficar indo ao mercado diversas vezes, até mesmo pelo gasto exagerado quando acabamos não comprando algo ou pior compramos em excesso e acabamos tendo que jogar os alimentos fora, seja por serem perecíveis como frutas, legumes ou por data de validade vencida.

Conforme descrevi no slide ao realizar uma pesquisa de serviços similares encontrei diversas aplicações e sites que disponibilizam receitas, porém sua grande maioria não possui nenhuma forma de exportar os dados como lista de compras. 

Em outros casos, as receitas estão vinculadas a marca como, por exemplo no site da Nestle onde só era possivel gerar uma lista de compras de receitas exclusivas da Nestlé.

Além disso não me deparei com nenhuma que possua a proposta de otimizar todas as receitas em uma única lista de compras.

---------------
-----SLIDE 4
---------------
Vantagens

Por quê utilizar a Lista de Compras Inteligente?

[Otimizar seu tempo no supermercado]
Hoje em dia o tempo é algo extremamente valioso. Então, economizá-lo com a ida ao mercado se tornou uma prioridade também. 
Ir às compras sem saber exatamente o que comprar ou o que tem na sua despensa, tornasse um grande problema. Com a LISTA DE COMPRAS INTELIGENTE, além de sabermos exatamente o que comprar também, também evitaremos futuras idas desnecessárias ao mercado.

[Evitar gastos extras]
E além do desperdicio de tempo, temos também o financeiro, pois com a lista em mãos, você consegue fazer uma pesquisa de preços e comprar o que está mais em conta. Também é possivel aproveite as ofertas de diversos estabelecimentos e reduza o valor da fatura no final do mês.

[Evitar desperdício de alimentos]
Por fim, mais não menos importante temos que pensar no consumo sustentável. Quando se tem uma lista de compras, é possivel visualizar melhor a quantidade que vai precisar de cada produto, evitando assim o desperdício e aproveitando melhor tudo que foi comprado.
---------------
-----SLIDE 5
---------------
Tecnologias

Eu fiz uma divisão aqui de todas as tecnologias e ferramentas que utilizei para desenvolver o sistema, começando pelo:

==
FRONT-END

- Bootstrap - que é um framework web que é uma mão na roda ali na hora de criar o front-end para aplicações web.

- Framework Angular para construção da interface de aplicações usando HTML, CSS e, principalmente, JavaScript.

Ele possui alguns elementos básicos que tornam essa construção bem interessante. Dentre os principais, podemos destacar os componentes, templates, diretivas, roteamento, módulos, serviços, injeção de dependências entre muitos outros..

Usei também a linguagem de programação TypeScript (superset de JavaScript).

*Eu destaquei em vermelho ali o node, pq ele não seria uma tecnologia front-end, mas no caso aqui eu só coloquei ele, pq o angular usa ele como plataforma para interpretar o codigo javascript.

==
BACK-END
Como linguagem de programação o Java versão 8 (que uma linguagem com que eu tenho mais familiaridade)

Junto com o framework Spring Boot que ajuda a reduzir o tempo gasto com as configurações iniciais e em poucos minutos já tem um projeto todo configurado.

Do ecosistema Spring, usei o Spring Data JPA que ajuda a unificar e facilitar a comunicação com o banco de dados (no caso o MySQL).

Também usei o modulo do Spring Security que ajuda a proteger o aplicativo da web implementando o protocolo de OAuth 2 que permite que uma aplicação se autentique em outra (nesse caso quando eu faço login na aplicação eu gero um token utilizando JWT(Jason Web Token).

==
FERAMENTAS:
Git - Controle de versão;
Github - Para disponibilizar meu codigo;
Visual Studio Code (VSCode) é um editor da Microsoft que usei para parte do Angular;
Spring Tools - Que um versão da IDE do Eclípse modificada pelo pessoal do spring que usei para parte do Java.

Como a ferramenta de gestão do projeto usei o TRELLO;
MySQL - banco de dados relacional

---------------
-----SLIDE 6
---------------
Arquitetura do Sistema

Nessa figura temos o modelo de arquitetura do sistema, onde o cliente cadastrado irá interagir com o sistema através de requisições https que serão disparadas conforme as interações do usuário com as telas do sistema (feita utilizando o Angular). 
Essas requisições serão interpretadas e enviadas para o backend (Spring Boot) através de chamadas REST em formato JSON, de modo a facilitar a comunicação entre as partes. A requisição então será interpretada e controlador correspondente será executado. 
Caso seja necessário persistir algum dado (como alterações ou inserções) a requisição será interpretada pela interface de comunicação com o banco (no caso o Spring Data JPA) e executado no banco de dados relacional (MySQL).

*OPCIONAL 1
Com isso podemos distinguir três camadas principais presentes na imagem

O Front-end (que utiliza Angular) sendo representado pelo retangulo vermelho - Que envia solicitações HTTP usando o modulo HttpClient para comunicação com o servidor de aplicação RESTful,

Back-end (que utiliza Spring Boot) sendo representado pelo retangulo verde - que seria o lado do servidor que expõe a API REST usando Spring Web MVC e interage com o banco de dados MySQL usando Spring Data JPA.

Database (ou Banco de Dados) representado pelo cilindro azul-claro – Onde os dados enviados serão armazenados no banco de dados MySQL.

*******************************
*OPCIONAL (CASO PERGUNTEM!!!)
*******************************
-Templates [Angular]
O Template é a parte da visualização que contém as ligações e a lógica de apresentação | atua como um modelo de como nossos dados devem ser organizados e apresentados ao usuário. O controlador fornece o contexto no qual as ligações são avaliadas e aplica o comportamento e a lógica ao nosso modelo.

-Components [Angular]
É a combinação (template + controlador) é um padrão comum e recorrente e oferece uma maneira fácil e concisa de combiná-los em entidades reutilizáveis ​​e isoladas, conhecidas como componentes. 
Além disso, o Angular cria um escopo isolado para cada instância de nosso componente, o que significa nenhum risco de nosso componente afetar outras partes do aplicativo ou vice-versa.

-Sevices [Angular]
É o objeto usado para organizar e compartilhar estados de objetos e as regras de negócio da aplicação. Ele é singleton, ou seja, há apenas uma instância disponível durante a vida útil da aplicação.

-HTTP Client
É um client que pode enviar uma solicitação e obter uma resposta do servidor em formato HTTP (?)

-Spring REST Controller
Trata-se de uma anotação que é usada para criar serviços da web RESTful usando Spring MVC. Com isso ele se encarrega de mapear os dados da solicitação para o método manipulador de solicitação definido. Depois que o corpo da resposta é gerado a partir do método do manipulador, ele o converte em resposta JSON.

-Services [Spring Boot]
Os Services são responsáveis pela lógica de negócio da aplicação, além de ser responsável por se comunicar com as camadas mais internas, como a camada de dados.

-Model [Spring Boot]
A classe model é responsável por obter os dados convertendo-os em conceitos significativos para a aplicação, assim como, processar, validar, associar e qualquer outra tarefa relativa ao tratamento dos dados.

-Spring Data JPA
Faz parte do ecosistema Spring é ajuda a unificar e facilitar a comunicação com o banco de dados

-Database
MySQL (banco de dados relacional)
*******************************

---------------
-----SLIDE 7 *NÃO LER!!
---------------
Modelo de Dados

Aqui temos uma representação de Modelo de Relacionamento de Entidade, utilizando a anotação Martin (ou pé de galinha como é mais conhecido)

[MySQL]
Conforme eu comentei anteriormente o banco de dados que eu utilizei foi  o MySQL que é um sistema gerenciador de banco de dados relacional de código aberto usado na maioria das aplicações gratuitas. Eu já possui familiaridade com o banco porque foi um dos primeiros que utilizei no trabalho.

[Tabela Associativa de Receita e Ingrediente]
Na tabela associativa eu mapeio a associação entres as tabelas Receita e Ingrediente, onde eu defino os ingredientes, sua quantidade e unidade de medida dessa quantidade que será utilizada na receita. 
Ele referencia as chaves primárias de cada uma dessas tabela e possui um um relacionamento muitos-para-um da tabela de junção para as tabelas individuais.

[Tabela central Receita]
Também é possivel perceber pela imagem que a tabela central no meu sistema é a de Receita que se relaciona com todas as outras de alguma maneira.

---------------
-----SLIDE 8
---------------
Gestão do Projeto

Primeiramente utilizei o git como controle de versão não apenas do código-fonte do meu projeto como também de toda a documentação que gerei ao longo de todo o processo de desenvolvimento, inclusive essa apresentação também esta lá commitada (risadas).. Conforme apresentado no slide tudo esta disponivel na plataforma de hospedagem que é o GitHub e num futuro bem proximo vou organizar melhor a descrição do projeto , colocar o passo-a-passo para subir ele, as bibliotecas angular que usei e etc...

Seguindo a ferramenta que escolhi para gerenciar o trabalho foi o Trello que é uma ferramenta flexível para organizar fluxos de trabalho e acompanhar o progresso com visualização e produtividade. A ferramenta mais utilizada para trabalhos em equipe, mas pode ser usada também por um só individuo, como foi meu caso.

No Trello montei um quadro Kanban onde as tarefas foram organizadas por funcionalidades na ordem em que o sistema seria utilizado, ou seja, começando pela funcionalidade de login e terminando na funcionalidade de gerar lista de compras e ao longo de todos os testes quando havia algum bug e/ou necessidade de alteração no codigo fui adicionando novos cards na lista de backlog.

---------------
-----SLIDE 9
---------------

Pois bem, agora que já expliquei do que se trata o sistema, suas tecnologias, como foi desenvolvido
Vou rodar o sistema aqui para gente ver ele funcionando...

[SCRIPT DE APRESENTACAO]

*USAR MICROSOFT EDGE
*LINK: http://localhost:4200/login

1 - Criar usuário
Nome: Gabriel Sousa
Email: gabriel.sousa@uva.br
Nome de Usuário: gabrielsousa
Senha: 123456
==
1.1 - Mudar imagem do usuário
Mudar para imagem neutra
==
2 - Cadastrar ingredientes
Nome: Queijo Muçarela
Nome: Queijo Minas
Nome: Sachê de tempero pronto de carne
(tentar cadastrar ovo para aparecer duplicidade)
==
3 - Criar receita
Nome: Omelete de queijo com presunto
Categoria: Lanches
Descrição: Receita de omelete rápido e prático que leva ingredientes simples no recheio: queijo, presunto, tomate e cebola.
==
3.1 - Receita Ingrediente:
6 ovos
200 gramas de presunto
100 gramas de queijo muçarela
100 gramas de queijo minas
1 tomate
1 cebola
1 sachê de tempero pronto de carne
3,5 gramas de sal
1 pimenta do reino
1 coentro

3.2 - Modo de Preparo
1 - Bata os ovos em uma vasilha e acrescente todos os ingredientes picados.
2 - Use a quantidade de sal e pimenta-do-reino que achar necessária.
3 - Em uma panela quente, acrescente um fio de óleo e coloque um pouco da mistura, espalhando por toda a frigideira.
4 - Frite os dois lados e boa apetite.

FONTE: https://receitas.globo.com/omelete-de-queijo-com-presunto-511d55154d09381f8d000044.ghtml

==
4 - Cardapio Semanal
selecionar só "Omelete de queijo com presunto" para mostrar 
a otimização dos ingredientes na lista de compras
==
5 - gerar lista de compras

---------------
-----SLIDE 10
---------------
Trabalhos Futuros

[USABILIDADE]

1- Combobox com pesquisa de ingrediente
Implementar na combobox de ingredientes a função de pesquisar e ao ir digitando o nome do ingrediente encurtando a lista da combobox para assim agilizar a procura dos ingredientes para receita.

2 - Tela de visualização da receita completa
Adicionar uma tela de visualização da receita completa contendo além das informações da receita, seus ingredientes e quantidades e seu modo de preparo para melhor experiência do usuário;

3 - Compartilhar a lista de compras no WhatsApp
Implementar feature de compartilhar o PDF da lista de compras gerada para aplicativos como: WhatsApp, E-mail, Facebook e etc;

[MELHORIAS]

1- Controle de edição
Desenvolver e implementar regras de negócios de permissão no que diz respeito a edição e exclusão das receitas, ou seja, permitir somente ao criador das receita excluir ou edita-la. Estando disponível aos outros usuários apenas a visualização da receita.

2-Conversor de medidas culinárias
Esse melhoria seria para repensar e criar um padrão de medidas culinárias, pq apos muitas pesquisas que eu fiz atras de receitas na internet, eu me deparei com muitas variações dessas medidas, por exemplo, no sistema hoje eu escolhi eu tenho a opção de colher(equivale 15ml), mas existem diversas outras variações tem a colher de chá, colher de sobremesa, colher de sopa e etc. E em especial uma que eu pensei muito como poderia adaptar e a medida que mais encontrei na internet a medida "a gosto" entre aspas..

3 - Utilizar JUnit
Implementar testes unitários usando JUnit para garantir um código mais limpo e confiável;

[Disponibilizar Plataformas]
Disponibilizar a aplicação para outras plataformas no caso os sistemas android e iOS.

(*opcional comentar)
Adicionar novas features referentes a tela de login, como: Recurso de lembrar senha (mantendo o usuário logado mesmo se fechar o navegador) e recuperar senha (uma forma de recuperar a senha utilizando o e-mail de cadastro);

---------------
-----SLIDE 11 *pode resumir se tiver muito longo*
--------------
Desafios e Aprendizados

Desenvolver esse sistema do zero me possibilitou a oportunidade de reconsiderar o desenvolvimento tradicional que muitas vezes se torna automatico quando estamos no trabalho, eu pude trasformar esse meu produto final em algo que gostaria de usar diariamente para facilitar as minhas compras. 

Com certeza há inúmeras funcionalidades e melhorias além das apresentadas que eu gostaria de acrescentar futuramente, mas o aprendizado possibilitado tornou a minha experiência em algo muito valioso e gratificante. 

Uma das grandes dificuldades encontradas logo de início foi devido a estar realizando o trabalho de forma individual, portanto tive que ser uma equipe de um "homem só", ou seja, assumi a função de analista de requisitos, analista de produto, analista de testes, arquiteto de sistema, designer, DBA e claro a minha favorita que é desenvolvedor.

Também tive a oportunidade de trabalhar com o framework Angular que nunca tinha utilizado, e com isso fui capaz de aprender bastante sobre o funcionamento do framework que utiliza o Node.js como interpretador de JavaScript e em conjunto usa a linguagem de programação TypeScript para criar a interface com o usuário, no caso o front-end.

Na parte do desenvolvimento back-end pude também relembrar diversos conceitos de programação orientada a objetos ao usando o Java em conjunto com um dos meus framework favoritos que o SpringBoot que agiliza demais na hora das configurações inciais do projeto, além de poder utilizar as bibliotecas do ecosistema do spring como o Spring Security e Spring Data JPA e no caso do banco MySQL. 

Mas enfim, fui capaz relembrar e utilizar diversos aprendizados ensinados durante todo período acadêmico na universidade.

---------------
-----SLIDE 12 [FINAL]
--------------

É isso, muito obrigado á todos!

Obrigado !!